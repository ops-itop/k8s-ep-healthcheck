apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ep-healthcheck
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch
  - patch
---    
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ep-healthcheck
---  
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ep-healthcheck-rw
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ep-healthcheck
subjects:
- kind: ServiceAccount
  name: ep-healthcheck
  namespace: __NAMESPACE__
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: __APP__
  labels:
    app: __APP__
spec:
  replicas: 1
  selector:
    matchLabels:
      app: __APP__
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: __APP__
    spec:
      containers:
      - name: __APP__
        image: __IMAGE__
        imagePullPolicy: Always
        env:
        - name: CORPID
          value: "__CORPID__"
        - name: CORPSECRET
          value: "__CORPSECRET__"
        - name: AGENTID
          value: "__AGENTID__"
        - name: TOUSER
          value: "__TOUSER__"
        - name: LOGLEVEL
          value: "__LOGLEVEL__"
        - name: TIMEOUT
          value: "__TIMEOUT__"
        - name: RETRY
          value: "__RETRY__"
        - name: INTERVAL
          value: "__INTERVAL__"
        resources:
          limits:
            cpu: "0.5"
            memory: "500Mi"
          requests:
            cpu: "0.3"
            memory: "200Mi"
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: ep-healthcheck
      serviceAccountName: ep-healthcheck
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: __APP__
  labels:
    app: __APP__
spec:
  selector:    
    app: __APP__
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: http
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata: 
  name: __APP__
  annotations:
    kubernetes.io/ingress.class: __NAMESPACE__
spec:
  rules:
  - host: __HOST__
    http:
      paths:
      - path: /
        backend:
          serviceName: __APP__
          servicePort: 8080
